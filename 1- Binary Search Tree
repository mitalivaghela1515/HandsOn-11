class TreeNode:
def __init__(self, key):
self.key = key
self.left = None
self.right = None
class BinarySearchTree:
def __init__(self):
self.root = None
def insert(self, key):
self.root = self._insert_recursive(self.root, key)
def _insert_recursive(self, root, key):
if root is None:
return TreeNode(key)
if key < root.key:
root.left = self._insert_recursive(root.left, key)
else:
root.right = self._insert_recursive(root.right, key)
return root
def search(self, key):
return self._search_recursive(self.root, key)
def _search_recursive(self, root, key):
if root is None or root.key == key:
return root
if key < root.key:
return self._search_recursive(root.left, key)
else:
return self._search_recursive(root.right, key)
# Test the basic Binary Search Tree
bst = BinarySearchTree()
keys = [8, 3, 10, 1, 6, 14, 4, 7, 13]
for key in keys:
bst.insert(key)
print("Search for 6:", bst.search(6)) # Output: TreeNode object
print("Search for 11:", bst.search(11)) # Output: None
