RED = True
BLACK = False
class RBNode:
def __init__(self, key, color=RED):
self.key = key
self.color = color
self.left = None
self.right = None
self.parent = None
class RedBlackTree:
def __init__(self):
self.root = None
def insert(self, key):
new_node = RBNode(key)
self._insert_node(new_node)
self._fix_violation(new_node)
def _insert_node(self, node):
if not self.root:
self.root = node
else:
current = self.root
while current:
parent = current
if node.key < current.key:
current = current.left
else:
current = current.right
node.parent = parent
if node.key < parent.key:
parent.left = node
else:
parent.right = node
def _fix_violation(self, node):
while node != self.root and node.parent.color == RED:
if node.parent == node.parent.parent.left:
uncle = node.parent.parent.right
if uncle and uncle.color == RED:
node.parent.color = BLACK
uncle.color = BLACK
node.parent.parent.color = RED
node = node.parent.parent
else:
if node == node.parent.right:
node = node.parent
self._left_rotate(node)
node.parent.color = BLACK
node.parent.parent.color = RED
self._right_rotate(node.parent.parent)
else:
uncle = node.parent.parent.left
if uncle and uncle.color == RED:
node.parent.color = BLACK
uncle.color = BLACK
node.parent.parent.color = RED
node = node.parent.parent
else:
if node == node.parent.left:
node = node.parent
self._right_rotate(node)
node.parent.color = BLACK
node.parent.parent.color = RED
self._left_rotate(node.parent.parent)
self.root.color = BLACK
def _left_rotate(self, x):
y = x.right
x.right = y.left
if y.left:
y.left.parent = x
y.parent = x.parent
if not x.parent:
self.root = y
elif x == x.parent.left:
x.parent.left = y
else:
x.parent.right = y
y.left = x
x.parent = y
def _right_rotate(self, y):
x = y.left
y.left = x.right
if x.right:
x.right.parent = y
x.parent = y.parent
if not y.parent:
self.root = x
elif y == y.parent.right:
y.parent.right = x
else:
y.parent.left = x
x.right = y
y.parent = x
# Test the Red-Black Tree
rbt = RedBlackTree()
keys = [8, 3, 10, 1, 6, 14, 4, 7, 13]
for key in keys:
rbt.insert(key)
# Test insertion and color property
def inorder_traversal(node):
if node:
inorder_traversal(node.left)
print("Key:", node.key, "Color:", "RED" if node.color else "BLACK")
inorder_traversal(node.right)
print("Inorder Traversal:")
inorder_traversal(rbt.root)
