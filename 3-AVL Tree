class AVLNode:
def __init__(self, key):
self.key = key
self.left = None
self.right = None
self.height = 1
class AVLTree:
def __init__(self):
self.root = None
def _height(self, node):
if not node:
return 0
return node.height
def _update_height(self, node):
node.height = 1 + max(self._height(node.left), self._height(node.right))
def _balance(self, node):
if not node:
return 0
return self._height(node.left) - self._height(node.right)
def insert(self, key):
self.root = self._insert_recursive(self.root, key)
def _insert_recursive(self, node, key):
if not node:
return AVLNode(key)
if key < node.key:
node.left = self._insert_recursive(node.left, key)
else:
node.right = self._insert_recursive(node.right, key)
self._update_height(node)
balance = self._balance(node)
# Left Left Case
if balance > 1 and key < node.left.key:
return self._right_rotate(node)
# Right Right Case
if balance < -1 and key > node.right.key:
return self._left_rotate(node)
# Left Right Case
if balance > 1 and key > node.left.key:
node.left = self._left_rotate(node.left)
return self._right_rotate(node)
# Right Left Case
if balance < -1 and key < node.right.key:
node.right = self._right_rotate(node.right)
return self._left_rotate(node)
return node
def _left_rotate(self, z):
y = z.right
T2 = y.left
y.left = z
z.right = T2
self._update_height(z)
self._update_height(y)
return y
def _right_rotate(self, y):
x = y.left
T2 = x.right
x.right = y
y.left = T2
self._update_height(y)
self._update_height(x)
return x
# Test the AVL Tree
avl = AVLTree()
keys = [8, 3, 10, 1, 6, 14, 4, 7, 13]
for key in keys:
avl.insert(key)
# Test insertion and balancing
def inorder_traversal(node):
if node:
inorder_traversal(node.left)
print("Key:", node.key, "Height:", node.height)
inorder_traversal(node.right)
print("Inorder Traversal:")
inorder_traversal(avl.root)
